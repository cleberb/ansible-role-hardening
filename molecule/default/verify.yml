---
- name: Verify
  hosts: all
  any_errors_fatal: true

  tasks:
    - name: Reboot host
      become: true
      ansible.builtin.reboot:

    - name: Wait for the host and reconnect
      ansible.builtin.wait_for:
        port: 22
        host: "{{ (ansible_ssh_host | default(ansible_host)) | default(inventory_hostname) }}"
        delay: 10
        timeout: 120

    - name: Include default vars
      ansible.builtin.include_vars:
        dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/defaults/"
        extensions:
          - yml

    - name: Include host vars
      ansible.builtin.include_vars:
        file: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/inventory/host_vars/{{ ansible_hostname }}"

    - name: Set crypto-policies config as fact
      tags:
        - fact
        - crypto-policy
      block:
        - name: Stat crypto-policies config
          ansible.builtin.stat:
            path: /etc/crypto-policies/config
          register: stat_crypto_policies_config

        - name: Set crypto-policies
          ansible.builtin.set_fact:
            crypto_policies_config: "{{ stat_crypto_policies_config.stat.exists }}"

    - name: Create test users
      become: true
      ansible.builtin.user:
        name: "{{ item }}"
        shell: /bin/bash
        create_home: true
        generate_ssh_key: true
        ssh_key_bits: 3072
        ssh_key_file: .ssh/id_rsa
      loop:
        - testuser01
        - testuser02

    - name: Set sysctl configuration directory as fact
      tags:
        - fact
        - sysctl
      block:
        - name: Stat /usr/lib/sysctl.d/ exists
          ansible.builtin.stat:
            path: /usr/lib/sysctl.d/
          register: usr_lib_sysctl_d

        - name: Set sysctl fact
          ansible.builtin.set_fact:
            sysctl_conf_dir: "{{ '/usr/lib/sysctl.d' if usr_lib_sysctl_d.stat.exists else '/etc/sysctl.d' }}"

        - name: Debug sysctl
          ansible.builtin.debug:
            msg: "{{ sysctl_conf_dir }}"

    - name: Get installed ssh version
      ansible.builtin.command:
        cmd: ssh -V
      changed_when: false
      failed_when: false
      check_mode: false
      register: ssh_version
      tags:
        - sshd
        - sshd_config

    - name: Set ssh version as fact
      ansible.builtin.set_fact:
        ssh_installed_version: "{{ ssh_version.stderr |Â regex_search('^OpenSSH_([0-9+].[0-9]+)', '\\1') | join('.') | float }}"  # noqa jinja[spacing]
      tags:
        - sshd
        - sshd_config

    - name: Stat IPv6 status
      become: true
      ansible.builtin.stat:
        path: /proc/sys/net/ipv6
      register: stat_ipv6

    - name: Set IPv6 fact
      ansible.builtin.set_fact:
        system_has_ipv6: "{{ stat_ipv6.stat.exists }}"

    - name: Update current facts
      ansible.builtin.setup:

    - name: Ensure snapd is running
      ansible.builtin.shell: |
        set -o pipefail
        snap info snapd | grep snap-id
      args:
        executable: /bin/bash
      register: snapd_running
      changed_when: false
      failed_when: snapd_running.rc != 0
      when: ansible_distribution == "Ubuntu"

    - name: Verify auditd configuration
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/audit/auditd.conf
        line: "{{ item }}"
        state: present
      check_mode: true
      register: auditd_conf
      failed_when: auditd_conf is changed
      with_items:
        - action_mail_acct = {{ auditd_action_mail_acct }}
        - admin_space_left_action = {{ auditd_admin_space_left_action }}
        - disk_error_action = {{ auditd_disk_error_action }}
        - disk_full_action = {{ auditd_disk_full_action }}
        - flush = {{ auditd_flush }}
        - max_log_file = {{ auditd_max_log_file }}
        - max_log_file_action = {{ auditd_max_log_file_action }}
        - name_format = hostname
        - num_logs = {{ auditd_num_logs }}
        - space_left = {{ auditd_space_left }}
        - space_left_action = {{ auditd_space_left_action }}

    - name: Verify systemd system.conf
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/systemd/system.conf
        line: "{{ item }}"
        state: present
      check_mode: true
      register: systemd_system_conf
      failed_when: systemd_system_conf is changed
      with_items:
        - DumpCore=no
        - CrashShell=no
        - CtrlAltDelBurstAction=none
        - DefaultLimitCORE=0
        - DefaultLimitNOFILE={{ limit_nofile_hard }}
        - DefaultLimitNPROC={{ limit_nproc_hard }}

    - name: Verify systemd user.conf
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/systemd/user.conf
        line: "{{ item }}"
        state: present
      check_mode: true
      register: systemd_user_conf
      failed_when: systemd_user_conf is changed
      with_items:
        - DefaultLimitCORE=0
        - DefaultLimitNOFILE={{ limit_nofile_hard }}
        - DefaultLimitNPROC={{ limit_nproc_hard }}

    - name: Verify postfix configuration
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/postfix/main.cf
        line: "{{ item }}"
        state: present
      check_mode: true
      register: postfix_conf
      failed_when: postfix_conf is changed
      with_items:
        - disable_vrfy_command = yes
        - inet_interfaces = loopback-only
        - smtpd_banner = \$myhostname - ESMTP
        - smtpd_client_restrictions = permit_mynetworks,reject

    - name: Stat /etc/ssh/sshd_config
      ansible.builtin.stat:
        path: /etc/ssh/sshd_config
      register: sshd_config_file

    - name: Stat /etc/ssh/ssh_config
      ansible.builtin.stat:
        path: /etc/ssh/ssh_config
      register: ssh_config_file

    - name: Stat /etc/ssh/sshd_config.d/01-hardening.conf
      become: true
      ansible.builtin.stat:
        path: /etc/ssh/sshd_config.d/01-hardening.conf
      register: sshd_config_directory

    - name: Assert /etc/ssh/ssh_config permissions
      ansible.builtin.assert:
        that:
          - ssh_config_file.stat.mode == "0644"
        success_msg: "{{ ssh_config_file.stat.path }} has correct permissions: {{ ssh_config_file.stat.mode }}"
        fail_msg: "{{ ssh_config_file.stat.path }} permissions are incorrect: {{ ssh_config_file.stat.mode }}"

    - name: Assert /etc/ssh/sshd_config permissions
      ansible.builtin.assert:
        that:
          - sshd_config_file.stat.mode == "0600"
        success_msg: "{{ sshd_config_file.stat.path }} has correct permissions: {{ sshd_config_file.stat.mode }}"
        fail_msg: "{{ sshd_config_file.stat.path }} permissions are incorrect: {{ sshd_config_file.stat.mode }}"

    - name: Assert /etc/ssh/sshd_config.d/01-hardening.conf permissions
      ansible.builtin.assert:
        that:
          - sshd_config_directory.stat.mode == "0600"
        success_msg: "{{ sshd_config_directory.stat.path }} has correct permissions: {{ sshd_config_directory.stat.mode }}"
        fail_msg: "{{ sshd_config_directory.stat.path }} permissions are incorrect: {{ sshd_config_directory.stat.mode }}"
      when: sshd_config_directory.stat.exists

    - name: Verify sshd PermitRootLogin configuration
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        line: PermitRootLogin yes
        state: absent
      check_mode: true
      register: sshd_config
      failed_when: sshd_config is changed

    - name: Verify sshd_config.d PermitRootLogin configuration
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config.d/01-hardening.conf
        line: PermitRootLogin yes
        state: absent
      check_mode: true
      register: sshd_config_d
      failed_when: sshd_config_d is changed
      when: sshd_config_directory.stat.exists

    - name: Set sshd_config_parameters
      ansible.builtin.set_fact:
        sshd_config_parameters:
          - "{{ 'AcceptEnv ' + sshd_accept_env if (sshd_accept_env is defined and sshd_accept_env | length != 0)}}"
          - AddressFamily {{ 'inet' if (disable_ipv6 | bool) else 'any' }}
          - AllowGroups vagrant sudo
          - AllowAgentForwarding {{ 'yes' if (sshd_allow_agent_forwarding | bool) else 'no' }}
          - >-
            {%- if (ssh_installed_version is version('6.2', '>=')) -%}
              {%- if (sshd_allow_tcp_forwarding in ('yes', 'no', 'local', 'all', 'remote')) -%}
                AllowTcpForwarding {{ sshd_allow_tcp_forwarding }}
            {%- else -%}
              AllowTcpForwarding {{ 'yes' if (sshd_allow_tcp_forwarding | bool) else 'no' }}
            {%- endif -%}
            {%- else -%}
              {%- if (sshd_allow_tcp_forwarding in ('yes', 'no')) -%}
                AllowTcpForwarding {{ sshd_allow_tcp_forwarding }}
            {%- else -%}
              AllowTcpForwarding {{ 'yes' if (sshd_allow_tcp_forwarding | bool) else 'no' }}
            {%- endif -%}
            {%- endif -%}
          - "{{ 'AuthenticationMethods ' + sshd_authentication_methods if (ssh_installed_version is version('6.2', '>='))}}"
          - Banner {{ sshd_banner if sshd_banner else 'none' }}
          - "{{ 'CASignatureAlgorithms ' + sshd_ca_signature_algorithms | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
          - "{{ 'Ciphers ' + sshd_ciphers | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
          - ClientAliveCountMax {{ sshd_client_alive_count_max | int }}
          - ClientAliveInterval {{ sshd_client_alive_interval | int }}
          - Compression {{ 'yes' if (sshd_compression | bool) else 'no' }}
          - "{{ 'DebianBanner ' + ('yes' if (sshd_debian_banner | bool) else 'no') if (ansible_facts.os_family == 'Debian')}}"
          - GSSAPIAuthentication {{ 'yes' if (sshd_gssapi_authentication | bool) else 'no' }}
          - GSSAPICleanupCredentials yes
          - HostbasedAuthentication {{ 'yes' if (sshd_hostbased_authentication | bool) else 'no' }}
          - "{{ 'HostKeyAlgorithms ' + sshd_host_key_algorithms | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
          - IgnoreRhosts {{ 'yes' if (sshd_ignore_rhosts | bool) else 'no' }}
          - IgnoreUserKnownHosts {{ 'yes' if (sshd_ignore_user_known_hosts | bool) else 'no' }}
          - >-
            {%- if ssh_installed_version is version('8.7', '>=') -%}
              KbdInteractiveAuthentication {{ 'yes' if (sshd_kbd_interactive_authentication | bool) else 'no' }}
            {%- else -%}
              ChallengeResponseAuthentication {{ 'yes' if (sshd_kbd_interactive_authentication | bool) else 'no' }}
            {%- endif -%}
          - KerberosAuthentication {{ 'yes' if (sshd_kerberos_authentication | bool) else 'no' }}
          - "{{ 'KexAlgorithms ' + sshd_kex_algorithms | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
          - LogLevel {{ sshd_log_level }}
          - LoginGraceTime {{ sshd_login_grace_time | int }}
          - "{{ 'MACs ' + sshd_macs | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
          - MaxAuthTries {{ sshd_max_auth_tries | int }}
          - MaxSessions {{ sshd_max_sessions | int }}
          - MaxStartups {{ sshd_max_startups }}
          - PasswordAuthentication {{ 'yes' if (sshd_password_authentication | bool) else 'no' }}
          - PermitEmptyPasswords {{ 'yes' if (sshd_permit_empty_passwords | bool) else 'no' }}
          - PermitRootLogin {{ 'yes' if (sshd_permit_root_login | bool) else 'no' }}
          - PermitTunnel {{ 'yes' if (sshd_permit_tunnel | bool) else 'no' }}
          - PermitUserEnvironment {{ 'yes' if (sshd_permit_user_environment | bool) else 'no' }}
          - PrintLastLog {{ 'yes' if (sshd_print_last_log | bool) else 'no' }}
          - PrintMotd {{ 'yes' if (sshd_print_motd | bool) else 'no' }}
          - "{{ 'Protocol 2' if (ssh_installed_version is version('7.6', '<'))}}"
          - PubkeyAuthentication yes
          - RekeyLimit {{ sshd_rekey_limit }}
          - "{{ 'RequiredRSASize ' + (sshd_required_rsa_size | string) if (ssh_installed_version is version('9.1', '>'))}}"
          - StrictModes {{ 'yes' if (sshd_strict_modes | bool) else 'no' }}
          - "{{ 'Subsystem sftp ' + sshd_sftp_subsystem if (sshd_sftp_enabled | bool)}}"
          - SyslogFacility {{ sshd_syslog_facility }}
          - TCPKeepAlive {{ 'yes' if (sshd_tcp_keep_alive | bool) else 'no' }}
          - UseDNS {{ 'yes' if (sshd_use_dns | bool) else 'no' }}
          - "{{ 'UseLogin no' if (ssh_installed_version is version('7.4', '<'))}}"
          - UsePAM {{ 'yes' if (sshd_use_pam | bool) else 'no' }}
          - >-
            {%- if ssh_installed_version is version('7.5', '<') -%}
              {%- if sshd_use_privilege_separation in ('yes', 'no', 'sandbox') -%}
                UsePrivilegeSeparation {{ sshd_use_privilege_separation }}
            {%- else -%}
              UsePrivilegeSeparation {{ 'yes' if (sshd_use_privilege_separation | bool) else 'no' }}
            {%- endif -%}
            {%- endif -%}
          - X11Forwarding {{ 'yes' if (sshd_x11_forwarding | bool) else 'no' }}
          - X11UseLocalhost yes

    - name: Set repeating parameters and clear empty values in sshd_config_parameters
      vars:
        _hostkey: "{{ ['HostKey '] | product(sshd_host_keys_files) | map('join') | list }}"
        _listenaddress: "{{ ['ListenAddress '] | product(sshd_listen) | map('join') | list }}"
        _port: "{{ ['Port '] | product(sshd_ports) | map('join') | list }}"
      ansible.builtin.set_fact:
        sshd_config_parameters:
          "{{ (sshd_config_parameters + _hostkey + _listenaddress + _port) | select() }}"

    - name: Verify sshd configuration
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        line: "{{ item }}"
        state: present
      check_mode: true
      register: sshd_config
      failed_when: sshd_config is changed
      loop: "{{ sshd_config_parameters }}"
      when: not sshd_config_directory.stat.exists

    - name: Verify sshd config.d configuration
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config.d/01-hardening.conf
        line: "{{ item }}"
        state: present
      check_mode: true
      register: sshd_config
      failed_when: sshd_config is changed
      loop: "{{ sshd_config_parameters }}"
      when: sshd_config_directory.stat.exists

    - name: Set parameters for runtime check
      ansible.builtin.set_fact:
        sshd_config_parameters_runtime: >-
          {{
            sshd_config_parameters_runtime | default([]) +
            [(item.split(' ')[0] | lower) + ' ' + (item.split(' ')[1:] | join(' '))]
          }}
      loop: "{{ sshd_config_parameters }}"

    - name: Set multiple parameters in runtime checking
      ansible.builtin.set_fact:
        sshd_config_parameters_runtime: >-
          {{
            ( sshd_config_parameters_runtime | reject('regex', '^' + item + ' ') | list ) +
            ( [item + ' '] |
              product( sshd_config_parameters_runtime |
                       select('match', '^' + item + ' ') |
                       map('split', ' ', 1) |
                       map('last') |
                       map('split', ' ') |
                       unique |
                       flatten ) |
              map('join') | list )
          }}
      loop:
        - allowgroups
        - acceptenv

    - name: Ignore parameters for runtime check
      ansible.builtin.set_fact:
        sshd_config_parameters_runtime: "{{ (sshd_config_parameters_runtime | reject('regex', '^' + item + ' ') | list) }}"
      loop:
        # debianbanner: not show in runtime.
        - debianbanner
        # listenaddress: runtime returns values addresses and ports(Ex: 0.0.0.0:22), ports is optional and can have multiple values.
        - listenaddress
        # rekeylimit: runtime returns values only in bytes and seconds, having to treat these values would be a lot of work.
        - rekeylimit

    - name: Verify sshd runtime configuration
      become: true
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.command: sshd -T
      check_mode: false
      register: sshd_config
      changed_when: false
      failed_when: item not in sshd_config.stdout_lines
      loop: "{{ sshd_config_parameters_runtime }}"

    - name: Verify ssh client configuration
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/ssh/ssh_config
        line: "    {{ item }}"
        state: present
      check_mode: true
      register: ssh_config
      failed_when: ssh_config is changed
      loop:
        - GSSAPIAuthentication {{ 'yes' if (sshd_gssapi_authentication | bool) else 'no' }}
        - HashKnownHosts yes
        - RekeyLimit {{ sshd_rekey_limit }}

    - name: Merge sysctl settings
      ansible.builtin.set_fact:
        sysctl_settings: "{{ generic_sysctl_settings | combine(ipv4_sysctl_settings) }}"

    - name: Verify sysctl configuration
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        grep -R "^{{ item.key }}.*{{ item.value | int }}$" "{{ sysctl_conf_dir }}/"
      args:
        executable: /bin/bash
      with_dict: "{{ sysctl_settings | dict2items | rejectattr('key', 'search', 'nf_conntrack') | items2dict }}"
      register: sysctl_file_config
      failed_when: sysctl_file_config.rc != 0
      changed_when: sysctl_file_config.rc != 0

    - name: Verify sysctl runtime configuration
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        sysctl -a | grep "^{{ item.key }}.*{{ item.value | int }}$"
      args:
        executable: /bin/bash
      with_dict: "{{ sysctl_settings | dict2items | rejectattr('key', 'search', 'nf_conntrack') | items2dict }}"
      register: sysctl_runtime_config
      failed_when: sysctl_runtime_config.rc != 0
      changed_when: sysctl_runtime_config.rc != 0

    - name: Get crypto-policies value
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.shell: grep "^{{ crypto_policy | upper }}$" /etc/crypto-policies/config
      register: crypto_policy_set
      when: crypto_policies_config
      failed_when: crypto_policy_set.rc != 0
      changed_when: crypto_policy_set.rc != 0

    - name: Verify noexec /dev/shm
      ansible.builtin.shell: grep '^tmpfs\s/dev/shm.*noexec' /proc/mounts
      register: dev_shm_noexec
      failed_when: dev_shm_noexec.rc != 0
      changed_when: dev_shm_noexec.rc != 0

    - name: Verify /proc
      ansible.builtin.shell: |
        set -o pipefail
        grep -E '^proc\s/proc proc rw,nosuid,nodev,noexec,relatime.*hidepid=({{ hide_pid }}|invisible)' /proc/mounts
      args:
        executable: /bin/bash
      register: proc_opts
      failed_when: proc_opts.rc != 0
      changed_when: proc_opts.rc != 0
      tags:
        - skip_ansible_lint

    - name: Verify tmp.mount
      become: true
      ansible.builtin.systemd:
        name: tmp.mount
      register: tmp_mount
      failed_when: not 'nosuid,nodev,noexec' in tmp_mount.status.Options
      changed_when: not 'nosuid,nodev,noexec' in tmp_mount.status.Options

    - name: Verify /tmp
      become: true
      ansible.builtin.shell: grep '^tmpfs\s/tmp\s.*nosuid,nodev,noexec' /proc/mounts
      register: mounts_tmp
      failed_when: mounts_tmp.rc != 0
      changed_when: mounts_tmp.rc != 0

    - name: Get PAM version
      tags:
        - fact
        - common-account
        - common-auth
        - pam
      block:
        - name: Gather package facts
          ansible.builtin.package_facts:

        - name: Get libpam version in Debian family
          ansible.builtin.set_fact:
            pam_version: "{{ ansible_facts.packages['libpam-modules'][0].version }}"
          when:
            - ansible_os_family == "Debian"
            - "'libpam-modules' in ansible_facts.packages"

        - name: Get libpam version in RedHat family
          ansible.builtin.set_fact:
            pam_version: "{{ ansible_facts.packages['pam'][0].version }}"
          when:
            - ansible_os_family == "RedHat"
            - "'pam' in ansible_facts.packages"

    - name: Set hashing algorithm for password (yescrypt|sha512)
      ansible.builtin.set_fact:
        password_algorithm: "{{ 'yescrypt' if (pam_version is version('1.4.0', '>=')) else 'sha512' }}"
      tags:
        - fact
        - pam
        - CIS-UBUNTU2204-5.4.4
        - M1041

    - name: Verify login.defs settings
      become: true
      ansible.builtin.shell: grep "^{{ item }}$" /etc/login.defs
      register: login_defs
      failed_when: login_defs.rc != 0
      changed_when: login_defs.rc != 0
      with_items:
        - ENCRYPT_METHOD {{ password_algorithm | upper }}
        - FAILLOG_ENAB yes
        - LOG_OK_LOGINS yes
        - LOGIN_RETRIES {{ login_defs.login_retries }}
        - LOGIN_TIMEOUT {{ login_defs.login_timeout }}
        - PASS_MAX_DAYS {{ login_defs.pass_max_days }}
        - PASS_MIN_DAYS {{ login_defs.pass_min_days }}
        - PASS_WARN_AGE {{ login_defs.pass_warn_age }}
        - SHA_CRYPT_MAX_ROUNDS 65536
        - SHA_CRYPT_MIN_ROUNDS 10000
        - SU_NAME su
        - SYSLOG_SG_ENAB yes
        - SYSLOG_SU_ENAB yes
        - UMASK {{ umask_value }}

    - name: Set pwquality_parameters
      ansible.builtin.set_fact:
        pwquality_parameters:
          - dcredit = {{ pwquality.dcredit }}
          - dictcheck = {{ pwquality.dictcheck }}
          - >-
            {%- if pwquality.dictpath != "" -%}
              dictpath = {{ pwquality.dictpath }}
            {%- endif -%}
          - difok = {{ pwquality.difok }}
          - >-
            {%- if (pwquality.enforce_for_root | bool) -%}
              enforce_for_root
            {%- endif -%}
          - enforcing = {{ pwquality.enforcing }}
          - gecoscheck = {{ pwquality.gecoscheck }}
          - lcredit = {{ pwquality.lcredit }}
          - >-
            {%- if (pwquality.local_users_only | bool) -%}
              local_users_only
            {%- endif -%}
          - maxclassrepeat = {{ pwquality.maxclassrepeat }}
          - maxrepeat = {{ pwquality.maxrepeat }}
          - minclass = {{ pwquality.minclass }}
          - minlen = {{ pwquality.minlen }}
          - ocredit = {{ pwquality.ocredit }}
          - retry = {{ pwquality.retry }}
          - ucredit = {{ pwquality.ucredit }}
          - usercheck = {{ pwquality.usercheck }}
          - usersubstr = {{ pwquality.usersubstr }}

    - name: Verify pwquality.conf settings
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/security/pwquality.conf
        mode: "0644"
        state: present
        line: "{{ item }}"
      check_mode: true
      register: verify_pwquality
      failed_when: verify_pwquality is changed
      loop: "{{ pwquality_parameters | select() }}"

    - name: Verify RedHat GRUB audit settings
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        grubby --info="/boot/vmlinuz-$(uname -r)" | grep "^args.*{{ grub_audit_cmdline }} {{ grub_audit_backlog_cmdline }}"
      register: audit_grubenv
      failed_when: audit_grubenv.rc != 0
      changed_when: audit_grubenv.rc != 0
      when: ansible_os_family == "RedHat"

    - name: Verify Debian audit GRUB settings
      become: true
      ansible.builtin.shell: grep "linux.*{{ grub_audit_cmdline }} {{ grub_audit_backlog_cmdline }}" /boot/grub/grub.cfg
      register: audit_grub_cfg
      failed_when: audit_grub_cfg.rc != 0
      changed_when: audit_grub_cfg.rc != 0
      when: ansible_os_family == "Debian"

    - name: Verify RedHat GRUB IPv6 settings
      become: true
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          grubby --info="/boot/vmlinuz-$(uname -r)" | grep "ipv6.disable=1"
      register: audit_grubenv
      failed_when: audit_grubenv.rc != 0
      changed_when: audit_grubenv.rc != 0
      when: ansible_os_family == "RedHat" and disable_ipv6

    - name: Verify Debian GRUB IPv6 settings
      become: true
      ansible.builtin.shell:
        cmd: grep "linux.*ipv6.disable=1" /boot/grub/grub.cfg
      register: audit_grub_cfg
      failed_when: audit_grub_cfg.rc != 0
      changed_when: audit_grub_cfg.rc != 0
      when: ansible_os_family == "Debian" and disable_ipv6

    - name: Verify IPv6 sysctl configuration
      become: true
      ansible.builtin.shell: grep -R "^{{ item }}$" /etc/sysctl.* /usr/lib/sysctl.d/*
      register: sysctl_ipv6_config
      failed_when: sysctl_ipv6_config.rc != 0
      changed_when: sysctl_ipv6_config.rc != 0
      with_items:
        - net.ipv6.conf.all.disable_ipv6=1
        - net.ipv6.conf.default.disable_ipv6=1
      when: disable_ipv6

    - name: Verify IPv6 sysctl runtime configuration
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        sysctl -a | grep "^{{ item.key }}.*{{ item.value | int }}$"
      args:
        executable: /bin/bash
      with_dict: "{{ ipv6_disable_sysctl_settings }}"
      register: sysctl_ipv6
      changed_when: sysctl_ipv6.rc != 0
      failed_when: sysctl_ipv6.rc != 0
      when: system_has_ipv6 and disable_ipv6

    - name: Find GRUB config files
      become: true
      ansible.builtin.find:
        paths: /boot
        patterns: "*.cfg,grubenv"
        recurse: true
      register: perm_grub_cfg

    - name: Verify GRUB config files permission
      become: true
      ansible.builtin.stat:
        path: "{{ item.path }}"
      changed_when: item.mode | int > 644
      failed_when: item.mode | int > 644
      with_items:
        - "{{ perm_grub_cfg.files | reject('search', '/boot/efi/EFI/.*/grub.cfg') | list }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Verify systemd resolved.conf
      become: true
      vars:
        resolved_parameters: >-
          [
            "DNS={{ dns | join(' ') }}"
            {{ ', "FallbackDNS=' + fallback_dns | join(' ') + '"' if fallback_dns }}
            {{ ', "DNSSEC=' + dnssec + '"' if dnssec }}
            {{ ', "DNSOverTLS=' + dns_over_tls + '"' if dns_over_tls }}
          ]
      ansible.builtin.shell: grep "^{{ item }}$" /etc/systemd/resolved.conf
      register: systemd_resolved_conf
      failed_when: systemd_resolved_conf.rc != 0
      changed_when: systemd_resolved_conf.rc != 0
      loop: "{{ resolved_parameters }}"
      when: ansible_os_family != "RedHat"

    - name: Verify resolv.conf
      become: true
      vars:
        resolv_parameters: >-
          [
            {% for nameserver in dns %}
              {% if not loop.first %}
                ,
              {% endif %}
              '"nameserver {{ nameserver }}"'
            {% endfor %}
          ]
      ansible.builtin.shell: grep "^{{ item }}$" /etc/resolv.conf
      register: resolv_conf
      failed_when: resolv_conf.rc != 0
      changed_when: resolv_conf.rc != 0
      loop: "{{ resolv_parameters }}"
      when:
        - ansible_os_family == "RedHat"

    - name: Verify systemd timesyncd.conf
      become: true
      ansible.builtin.shell: grep "^{{ item }}$" /etc/systemd/timesyncd.conf
      register: systemd_timesyncd_conf
      failed_when: systemd_timesyncd_conf.rc != 0
      changed_when: systemd_timesyncd_conf.rc != 0
      with_items:
        - NTP={{ ntp }}
        - FallbackNTP={{ fallback_ntp }}
      when: enable_timesyncd

    - name: Stat /etc/default/motd-news
      ansible.builtin.stat:
        path: /etc/default/motd-news
      register: motd_news

    - name: Verify masked motdnews service
      become: true
      ansible.builtin.systemd:
        name: motd-news.service
        masked: true
        enabled: false
        state: stopped
      check_mode: true
      register: motdnews_service
      failed_when: motdnews_service is changed
      when: ansible_os_family == "Debian" and motd_news.stat.exists

    - name: Stat /usr/bin/pro
      ansible.builtin.stat:
        path: /usr/bin/pro
      register: ubuntu_advantage_pro
      when: ansible_os_family == "Debian"

    - name: Verify that apt_news is disabled
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        pro config show | grep '^apt_news.*False'
      args:
        executable: /bin/bash
      register: ubuntu_advantage_pro_state
      changed_when: false
      failed_when: ubuntu_advantage_pro_state.rc != 0
      when: ansible_os_family == "Debian" and ubuntu_advantage_pro.stat.exists

    - name: Stat apt ESM hook
      ansible.builtin.stat:
        path: /etc/apt/apt.conf.d/20apt-esm-hook.conf
      register: ubuntu_esm_hook
      failed_when: ubuntu_esm_hook.stat.exists
      when: ansible_os_family == "Debian"

    - name: Efi fact
      ansible.builtin.set_fact:
        booted_with_efi: "{{ ansible_mounts | selectattr('mount', 'equalto', '/boot/efi') | list | length > 0 }}"

    - name: Verify cracklib password list
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.shell: |
        set -o pipefail
        grep '/usr/share/dict/passwords' /var/cache/cracklib/src-dicts
      args:
        executable: /bin/bash
      register: cracklib_passwords
      failed_when: cracklib_passwords.rc != 0
      changed_when: cracklib_passwords.rc != 0
      when: ansible_os_family == "Debian"

    - name: Index blacklisted kernel modules
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.shell: |
        set -o pipefail
        modprobe -c | grep -o '^blacklist .*' | awk '{print $2}'
      args:
        executable: /bin/bash
      changed_when: false
      failed_when: modprobe_blacklist.rc != 0
      register: modprobe_blacklist
      when: block_blacklisted | bool

    - name: Verify blocked blacklisted kernel modules
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.shell: |
        set -o pipefail
        grep 'install {{ item }} /bin/true' /etc/modprobe.d/blockblacklisted.conf
      args:
        executable: /bin/bash
      register: modprobe_blockblacklisted
      failed_when: modprobe_blockblacklisted.rc != 0
      changed_when: modprobe_blockblacklisted.rc != 0
      with_items:
        - "{{ modprobe_blacklist.stdout_lines | sort }}"
      when: block_blacklisted | bool

    - name: Verify sudo settings
      ansible.builtin.shell: |
        set -o pipefail
        sudo -l | grep "{{ item }}"
      register: sudo_settings
      failed_when: sudo_settings.rc != 0
      changed_when: sudo_settings.rc != 0
      args:
        executable: /bin/bash
      with_items:
        - use_pty
        - logfile="/var/log/sudo.log"
        - "!pwfeedback"
        - "!visiblepw"
        - passwd_timeout=1
        - timestamp_timeout=5
        - timestamp_type=tty
        - "!rootpw"
        - "!runaspw"
        - "!targetpw"

    - name: Stat faillock.conf
      become: true
      ansible.builtin.stat:
        path: /etc/security/faillock.conf
      register: faillockconf

    - name: Get PAM version
      when: faillockconf.stat.exists
      tags:
        - common-account
        - common-auth
        - pam
      block:
        - name: Gather package facts
          ansible.builtin.package_facts:

        - name: Get libpam version in Debian family
          ansible.builtin.set_fact:
            pam_version: "{{ ansible_facts.packages['libpam-modules'][0].version }}"
          when:
            - ansible_os_family == "Debian"
            - "'libpam-modules' in ansible_facts.packages"

        - name: Get libpam version in RedHat family
          ansible.builtin.set_fact:
            pam_version: "{{ ansible_facts.packages['pam'][0].version }}"
          when:
            - ansible_os_family == "RedHat"
            - "'pam' in ansible_facts.packages"

    - name: Set faillock_parameters
      ansible.builtin.set_fact:
        faillock_parameters:
          - dir = {{ faillock.dir }}
          - "{{ 'audit' if (faillock.audit | bool) }}"
          - "{{ 'silent' if (faillock.silent | bool) }}"
          - "{{ 'no_log_info' if (faillock.no_log_info | bool) }}"
          - "{{ 'local_users_only' if (faillock.local_users_only | bool) }}"
          - >-
            {%- if (pam_version is version('1.5.1', '>=')) -%}
              {{ 'nodelay' if (faillock.nodelay | bool) }}
            {%- endif -%}
          - deny = {{ faillock.deny }}
          - fail_interval = {{ faillock.fail_interval }}
          - unlock_time = {{ faillock.unlock_time }}
          - "{{ 'even_deny_root' if (faillock.even_deny_root | bool) }}"
          - root_unlock_time = {{ faillock.root_unlock_time }}
          - >-
            {%- for group in faillock.admin_group -%}
              admin_group = {{ group }}
            {%- endfor -%}
      when: faillockconf.stat.exists

    - name: Verify faillock.conf
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/security/faillock.conf
        mode: "0644"
        state: present
        line: "{{ item }}"
      check_mode: true
      register: verify_faillock
      failed_when: verify_faillock is changed
      loop: "{{ faillock_parameters | select() }}"
      when: faillockconf.stat.exists

    - name: Verify wireless state
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.command: nmcli -t radio
      register: wireless_state
      changed_when: not 'disabled' in wireless_state.stdout
      failed_when: not 'disabled' in wireless_state.stdout
      when: disable_wireless

    - name: Stat firewall rules when UFW is enabled
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        ufw show added | grep '^ufw' | grep -v "'ansible\smanaged'" | sed 's/ufw //g'
      args:
        executable: /bin/bash
      failed_when: ufw_not_managed.rc > 1
      changed_when: false
      register: ufw_not_managed
      when: ufw_enable

    - name: Stat firewall rules when UFW is disabled
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        ufw show added | grep '^ufw' | grep "'ansible\smanaged'" | sed 's/ufw //g'
      args:
        executable: /bin/bash
      failed_when: ufw_not_managed.rc > 1
      changed_when: false
      register: ufw_not_managed
      when: not ufw_enable

    - name: Verify aide configuration
      become: true
      when: install_aide
      block:
        - name: Aide config check
          become: true
          ansible.builtin.command: aide --config-check --config="{{ '/etc/aide/aide.conf' if ansible_os_family == 'Debian' else '/etc/aide.conf' }}"
          register: aide_config
          changed_when: false
          failed_when: aide_config.rc != 0

        - name: Verify aide settings
          ansible.builtin.shell: |
            set -o pipefail
            grep "^{{ item }}$" "{{ '/etc/aide/aide.conf' if ansible_os_family == 'Debian' else '/etc/aide.conf' }}"
          register: aide_settings
          changed_when: false
          failed_when: aide_settings.rc != 0
          args:
            executable: /bin/bash
          with_items:
            - /usr/sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/audispd p+i+n+u+g+s+b+acl+xattrs+sha512
            - "!/var/lib/docker"
            - "!/var/lib/lxcfs"
            - "!/var/lib/private/systemd"
            - "!/var/log/audit"
            - "!/var/log/journal"

    - name: Create hash password
      block:
        - name: Install mkpasswd RedHat family
          become: true
          ansible.builtin.package:
            name: mkpasswd
          when:
            - password_algorithm == "yescrypt"
            - ansible_os_family == "RedHat"
            - ansible_distribution_major_version | int >= 9

        - name: Install mkpasswd Debian family
          become: true
          ansible.builtin.package:
            name: whois
          when:
            - password_algorithm == "yescrypt"
            - ansible_os_family == "Debian"

        - name: Create yescrypt password hash
          ansible.builtin.shell: |
            set -o pipefail
            echo -n 'Ansible Role Test User' | mkpasswd --stdin --method=yescrypt --rounds=8
          args:
            executable: /bin/bash
          register: mkpasswd
          changed_when: false
          failed_when: mkpasswd.rc != 0
          when: password_algorithm == "yescrypt"

        - name: Set password
          ansible.builtin.set_fact:
            password: "{{ mkpasswd.stdout }}"
          when: password_algorithm == "yescrypt"

        - name: Create sha512 password hash
          vars:
            salt: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=16') }}"
          ansible.builtin.set_fact:
            password: "{{ 'Ansible Role Test User' | password_hash('sha512', salt, rounds=656000) }}"
          when: password_algorithm == "sha512"

        - name: Print password
          ansible.builtin.debug:
            msg: "{{ password }}"
          when: password

    - name: Create test user
      become: true
      ansible.builtin.user:
        name: roletestuser
        password: "{{ password }}"
        state: present
        shell: /bin/bash

    - name: Get test user password
      become: true
      ansible.builtin.command:
        cmd: grep roletestuser /etc/shadow
      register: roletestuser_pass
      changed_when: false

    - name: Print test user
      ansible.builtin.debug:
        msg: "{{ roletestuser_pass.stdout }}"
